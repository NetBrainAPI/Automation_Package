{
    "_id": "7f03975f-b182-b9a7-8e39-4dd5d7a73462",
    "author": "NetBrain",
    "bizType": "cd0243d2-fbda-4003-89f4-906b01c1def6",
    "command": "",
    "createTime": {
        "$date": 1560793008555
    },
    "description": "Device Type:\nAll Device Type\nCommand:\n       SNMP",
    "devTypes": [
        30003,
        30002
    ],
    "params": [
        {
            "name": "$intf_name"
        }
    ],
    "qualify": null,
    "retrieveScript": "'''\r\nBegin Declare Input Parameters\r\n [\r\n    {\"name\": \"$intf_name\"}\r\n ]\r\n End Declare\r\n '''\r\n\r\ndef BuildParameters(context, device_name, params):\r\n    intf_name = params['intf_name']\r\n    get_dn = GetInterfaceProperties(context, device_name,intf_name, {'techName': 'Cisco ACI', 'paramType': 'SDN', 'params' : ['dn'] })\r\n    dn = get_dn['params']['dn']\r\n    rtn_params = [{ 'devName' : device_name, 'dn' : dn, 'intfName': intf_name }]\r\n    return rtn_params\r\n\r\ndef RetrieveData(rtn_params):\r\n    dn = rtn_params['dn']\r\n    node_dn = dn.rpartition('/sys')[0]\r\n    url = '/api/mo/' + node_dn + '/sys.json'\r\n    rtn_params['dn'] = node_dn\r\n    rtn_params['url'] = url\r\n    node_data = getData(rtn_params)\r\n    node_data = json.loads(node_data)\r\n    uptime = node_data[0]['topSystem']['attributes']['systemUpTime']\r\n    #333:03:58:38.000\r\n    uptimes = uptime.replace('.000', '').split(':')\r\n    day = 0\r\n    hour = 0\r\n    min = 0\r\n    sec = 0\r\n    padding = 4 - len(uptimes)\r\n    if padding > 0:\r\n        for i in range(padding):\r\n            uptimes = ['0'] + uptimes\r\n    if len(uptimes) == 4:\r\n        day = int(uptimes[0])\r\n        hour = int(uptimes[1])\r\n        min = int(uptimes[2])\r\n        sec = int(uptimes[3])\r\n    uptime = 100 * (day * 86400 + hour * 3600 + min * 60 + sec)\r\n    \r\n    intf_name = rtn_params['intfName']\r\n    url = '/api/mo/' + dn + '.json'\r\n    rtn_params['url'] = url\r\n    rtn_params['dn'] = dn\r\n    data = getData(rtn_params)\r\n    bandwidth = 0\r\n    intf_status = 'Down'\r\n    data = json.loads(data)\r\n    intf_data = {}\r\n    use64 = False\r\n    traffic_in_byte = 0\r\n    traffic_out_byte = 0\r\n    link_error_in = 0\r\n    link_error_out = 0\r\n    if 'l1PhysIf' in data[0]:\r\n        intf_data = data[0]['l1PhysIf']['attributes']\r\n        bandwidth = int(intf_data['bw'])\r\n        if bandwidth >= 4294967295:\r\n            use64 = True\r\n        intf_status = intf_data['adminSt'].capitalize()\r\n        \r\n        #get real bandwidth by physical interface\r\n        url = '/api/mo/' + dn + '/phys.json'\r\n        rtn_params['url'] = url\r\n        data = getData(rtn_params)\r\n        data = json.loads(data)\r\n        if 'ethpmPhysIf' in data[0]:\r\n            intf_data = data[0]['ethpmPhysIf']['attributes']\r\n            #100M 1G 10G 25G 40G 100G\r\n            speed = intf_data['operSpeed']\r\n            if 'G' in speed or 'M' in speed:\r\n                unit = speed[len(speed) -1]\r\n                speed = speed[:len(speed) -1]\r\n                #Kbps\r\n                bandwidth = int(speed)\r\n                if unit == 'M':\r\n                    bandwidth *= 1000\r\n                elif unit == 'G':\r\n                    bandwidth *= 1000000\r\n                #Kbps -> bps\r\n                bandwidth *= 1000\r\n                if bandwidth > 4294967295:\r\n                    use64 = True\r\n            elif speed == 'unknown':\r\n                #get fex real bandwidth by ethpmPortCap\r\n                url = '/api/mo/' + dn + '/phys/portcap.json'\r\n                rtn_params['url'] = url\r\n                data = getData(rtn_params)\r\n                data = json.loads(data)\r\n                if 'ethpmPortCap' in data[0]:\r\n                    intf_data = data[0]['ethpmPortCap']['attributes']\r\n                    #100,1000,auto\r\n                    speed = intf_data['speed']\r\n                    speeds = speed.split(',')\r\n                    speeds = [x for x in speeds if x != 'auto']\r\n                    if speeds:\r\n                        unit = 'M'\r\n                        speed = int(speeds[-1])\r\n                        #Kbps\r\n                        bandwidth = int(speed)\r\n                        if unit == 'M':\r\n                            bandwidth *= 1000\r\n                        #Kbps -> bps\r\n                        bandwidth *= 1000\r\n                        if bandwidth > 4294967295:\r\n                            use64 = True\r\n    elif 'sviIf' in data[0]:\r\n        intf_data = data[0]['sviIf']['attributes']\r\n        bandwidth = int(intf_data['bw'])\r\n        if bandwidth >= 4294967295:\r\n            use64 = True\r\n        intf_status = intf_data['adminSt'].capitalize()\r\n    elif 'l3EncRtdIf' in data[0]:\r\n        intf_data = data[0]['l3EncRtdIf']['attributes']\r\n        bandwidth = int(intf_data['bw'])\r\n        if bandwidth >= 4294967295:\r\n            use64 = True\r\n        intf_status = intf_data['adminSt'].capitalize()\r\n        \r\n        #get real bandwidth by physical interface\r\n        #topology/pod-1/node-101/sys/inst-overlay-1/encrtd-[eth1/49.2]\r\n        #topology/pod-1/node-101/sys/ctx-[vxlan-2785280]/encrtd-[eth1/5.4]\r\n        phys_dn = dn.rpartition('/sys/')[0] + '/sys/phys-[' + intf_data['id'].rpartition('.')[0] + ']'\r\n        url = '/api/mo/' + phys_dn + '/phys.json'\r\n        rtn_params['url'] = url\r\n        data = getData(rtn_params)\r\n        data = json.loads(data)\r\n        if 'ethpmPhysIf' in data[0]:\r\n            intf_data = data[0]['ethpmPhysIf']['attributes']\r\n            #100M 1G 10G 25G 40G 100G\r\n            speed = intf_data['operSpeed']\r\n            if 'G' in speed or 'M' in speed:\r\n                unit = speed[len(speed) -1]\r\n                speed = speed[:len(speed) -1]\r\n                #Kbps\r\n                bandwidth = int(speed)\r\n                if unit == 'M':\r\n                    bandwidth *= 1000\r\n                elif unit == 'G':\r\n                    bandwidth *= 1000000\r\n                #Kbps -> bps\r\n                bandwidth *= 1000\r\n                if bandwidth > 4294967295:\r\n                    use64 = True\r\n            elif speed == 'unknown':\r\n                #get fex real bandwidth by ethpmPortCap\r\n                url = '/api/mo/' + phys_dn + '/phys/portcap.json'\r\n                rtn_params['url'] = url\r\n                data = getData(rtn_params)\r\n                data = json.loads(data)\r\n                if 'ethpmPortCap' in data[0]:\r\n                    intf_data = data[0]['ethpmPortCap']['attributes']\r\n                    #100,1000,auto\r\n                    speed = intf_data['speed']\r\n                    speeds = speed.split(',')\r\n                    speeds = [x for x in speeds if x != 'auto']\r\n                    if speeds:\r\n                        unit = 'M'\r\n                        speed = int(speeds[-1])\r\n                        #Kbps\r\n                        bandwidth = int(speed)\r\n                        if unit == 'M':\r\n                            bandwidth *= 1000\r\n                        #Kbps -> bps\r\n                        bandwidth *= 1000\r\n                        if bandwidth > 4294967295:\r\n                            use64 = True\r\n    elif 'pcAggrIf' in data[0]:\r\n        intf_data = data[0]['pcAggrIf']['attributes']\r\n        bandwidth = int(intf_data['bw'])\r\n        if bandwidth >= 4294967295:\r\n            use64 = True\r\n        intf_status = intf_data['adminSt'].capitalize()\r\n        \r\n        #get real bandwidth only support port channel interface\r\n        url = '/api/mo/' + dn + '/aggrif.json'\r\n        rtn_params['url'] = url\r\n        data = getData(rtn_params)\r\n        data = json.loads(data)\r\n        if 'ethpmAggrIf' in data[0]:\r\n            intf_data = data[0]['ethpmAggrIf']['attributes']\r\n            #100M 1G 10G 25G 40G 100G\r\n            speed = intf_data['operSpeed']\r\n            if 'G' in speed or 'M' in speed:\r\n                unit = speed[len(speed) -1]\r\n                speed = speed[:len(speed) -1]\r\n                #Kbps\r\n                bandwidth = int(speed)\r\n                if unit == 'M':\r\n                    bandwidth *= 1000\r\n                elif unit == 'G':\r\n                    bandwidth *= 1000000\r\n                #Kbps -> bps\r\n                bandwidth *= 1000\r\n                if bandwidth > 4294967295:\r\n                    use64 = True\r\n    url = '/api/mo/' + dn + '/HDeqptIngrTotal5min-0.json'\r\n    rtn_params['url'] = url\r\n    data = getData(rtn_params)\r\n    if data != '' and data != '[]':\r\n        data = json.loads(data)\r\n        if 'eqptIngrTotalHist5min' in data[0]:\r\n            traffic_data = data[0]['eqptIngrTotalHist5min']['attributes']\r\n            traffic_in_byte = int(traffic_data['bytesAvg'])\r\n    url = '/api/mo/' + dn + '/HDeqptEgrTotal5min-0.json'\r\n    rtn_params['url'] = url\r\n    data = getData(rtn_params)\r\n    if data != '' and data != '[]':\r\n        data = json.loads(data)\r\n        if 'eqptEgrTotalHist5min' in data[0]:\r\n            traffic_data = data[0]['eqptEgrTotalHist5min']['attributes']\r\n            traffic_out_byte = int(traffic_data['bytesAvg'])\r\n    url = '/api/mo/' + dn + '/CDeqptIngrDropPkts5min.json'\r\n    rtn_params['url'] = url\r\n    data = getData(rtn_params)\r\n    if data != '' and data != '[]':\r\n        data = json.loads(data)\r\n        if 'eqptIngrDropPkts5min' in data[0]:\r\n            traffic_data = data[0]['eqptIngrDropPkts5min']['attributes']\r\n            link_error_in = int(traffic_data['errorAvg'])\r\n    url = '/api/mo/' + dn + '/CDeqptEgrDropPkts5min.json'\r\n    rtn_params['url'] = url\r\n    data = getData(rtn_params)\r\n    if data != '' and data != '[]':\r\n        data = json.loads(data)\r\n        if 'eqptEgrDropPkts5min' in data[0]:\r\n            traffic_data = data[0]['eqptEgrDropPkts5min']['attributes']\r\n            link_error_out = int(traffic_data['errorAvg'])\r\n    rtn = {'intf': [intf_name], 'intf_status': [intf_status], 'bandwidth': [bandwidth], 'traffic_in_byte': [traffic_in_byte], 'traffic_out_byte': [traffic_out_byte], 'used64couter': [use64], 'link_error_in': [link_error_in], 'link_error_out': [link_error_out], 'sys_uptime': [uptime]}\r\n    return json.dumps(rtn)\r\n    \r\n    \r\n    ",
    "samples": [
        {
            "content": "{\n    \"intf\": [\n        \"Ethernet1/1\"\n    ],\n    \"intf_status\": [\n        \"Up\"\n    ],\n    \"bandwidth\": [\n        40000000000\n    ],\n    \"traffic_in_byte\": [\n        8125\n    ],\n    \"traffic_out_byte\": [\n        3990\n    ],\n    \"used64couter\": [\n        true\n    ],\n    \"link_error_in\": [\n        0\n    ],\n    \"link_error_out\": [\n        0\n    ],\n    \"sys_uptime\": [\n        3752828400\n    ]\n}",
            "devName": "",
            "identify": "{\"ConfigKey\":{\"MustConditions\":{\"Item\":[]},\"OptionalConditions\":{\"Item\":[]}}}",
            "index": 1,
            "interfaceKeys": [
                "_original_result.intf_table.$intf"
            ],
            "keyWords": "{\"keyWords\":[]}",
            "name": "sample1",
            "parserRules": "{\"parseRule\":[{\"type\":\"8\",\"script\":\"'''\\nBegin Declare Variable\\n[\\n    {\\\"name\\\": \\\"intf_table\\\", \\\"type\\\": \\\"table\\\",\\\"columns\\\": [\\n        {\\\"name\\\": \\\"intf\\\", \\\"type\\\": \\\"string\\\"},\\n        {\\\"name\\\": \\\"intf_status\\\", \\\"type\\\": \\\"string\\\"},\\n        {\\\"name\\\": \\\"bandwidth\\\", \\\"type\\\": \\\"int\\\"},\\n        {\\\"name\\\": \\\"traffic_in_byte\\\", \\\"type\\\": \\\"int\\\"},\\n        {\\\"name\\\": \\\"traffic_out_byte\\\", \\\"type\\\": \\\"int\\\"},\\n        {\\\"name\\\": \\\"used64couter\\\", \\\"type\\\": \\\"bool\\\"},\\n        {\\\"name\\\": \\\"link_error_in\\\", \\\"type\\\": \\\"int\\\"},\\n        {\\\"name\\\": \\\"link_error_out\\\", \\\"type\\\": \\\"int\\\"},\\n        {\\\"name\\\": \\\"sys_uptime\\\", \\\"type\\\": \\\"int\\\"}\\n    ]}\\n]\\nEnd Declare\\n\\n'''\\nimport re \\nimport json\\ndef ParseText(_original_result):\\n    original_result = json.loads(_original_result)\\n    value = {}\\n    value['intf_table']= original_result\\n    return value\\t\\n\",\"variableTypes\":{\"variableType\":[]},\"tableVariableTypes\":{\"tableVariableType\":[{\"name\":\"$intf_table\",\"variableTypes\":{\"variableType\":[{\"name\":\"$intf\",\"type\":\"string\"},{\"name\":\"$intf_status\",\"type\":\"string\"},{\"name\":\"$bandwidth\",\"type\":\"int\"},{\"name\":\"$traffic_in_byte\",\"type\":\"int\"},{\"name\":\"$traffic_out_byte\",\"type\":\"int\"},{\"name\":\"$used64couter\",\"type\":\"bool\"},{\"name\":\"$link_error_in\",\"type\":\"int\"},{\"name\":\"$link_error_out\",\"type\":\"int\"},{\"name\":\"$sys_uptime\",\"type\":\"int\"}]}}]},\"name\":\"\",\"xxid\":\"8d56d26b-832a-33fb-2764-09070775cbc0\",\"interfaceKey\":{\"intf_table\":\"$intf\"},\"hashColumns\":{\"intf_table\":[\"$intf\"]}}]}",
            "tableKeys": []
        }
    ],
    "schemaList": null,
    "sequences": [
        1
    ],
    "structure": {
        "structure": [
            {
                "attributes": [
                    {
                        "index": 9,
                        "name": "_rowCount",
                        "type": 1
                    },
                    {
                        "index": 10,
                        "name": "_hashCmp",
                        "type": 4
                    }
                ],
                "column": [
                    {
                        "index": 0,
                        "name": "bandwidth",
                        "type": 1
                    },
                    {
                        "index": 1,
                        "name": "intf",
                        "type": 4
                    },
                    {
                        "index": 2,
                        "name": "intf_status",
                        "type": 4
                    },
                    {
                        "index": 3,
                        "name": "link_error_in",
                        "type": 1
                    },
                    {
                        "index": 4,
                        "name": "link_error_out",
                        "type": 1
                    },
                    {
                        "index": 5,
                        "name": "sys_uptime",
                        "type": 1
                    },
                    {
                        "index": 6,
                        "name": "traffic_in_byte",
                        "type": 1
                    },
                    {
                        "index": 7,
                        "name": "traffic_out_byte",
                        "type": 1
                    },
                    {
                        "index": 8,
                        "name": "used64couter",
                        "type": 3
                    }
                ],
                "hashColumns": [
                    "intf"
                ],
                "hashSort": false,
                "index": 0,
                "name": "intf_table",
                "type": 11
            }
        ]
    },
    "structureId": "aff8514693cc158e1a100a235d283c56",
    "supportNodeType": 0,
    "type": 6,
    "variables": [
        {
            "capName": "$intf_table.$bandwidth",
            "dataType": "int",
            "desc": "",
            "extraInfo": {
                "hashColumns": [],
                "hashSort": false
            },
            "fullName": "$intf_table.$bandwidth",
            "intfKey": false,
            "name": "$bandwidth",
            "realType": null,
            "sampleIndex": 1,
            "varType": 1
        },
        {
            "capName": "$intf_table.$intf",
            "dataType": "string",
            "desc": "",
            "extraInfo": {
                "hashColumns": [],
                "hashSort": false
            },
            "fullName": "$intf_table.$intf",
            "intfKey": false,
            "name": "$intf",
            "realType": null,
            "sampleIndex": 1,
            "varType": 2
        },
        {
            "capName": "$intf_table.$intf_status",
            "dataType": "string",
            "desc": "",
            "extraInfo": {
                "hashColumns": [],
                "hashSort": false
            },
            "fullName": "$intf_table.$intf_status",
            "intfKey": false,
            "name": "$intf_status",
            "realType": null,
            "sampleIndex": 1,
            "varType": 1
        },
        {
            "capName": "$intf_table",
            "dataType": "table",
            "desc": "Interface table.",
            "extraInfo": {
                "hashColumns": [
                    "$intf"
                ],
                "hashSort": false
            },
            "fullName": "$intf_table",
            "intfKey": false,
            "name": "$intf_table",
            "realType": null,
            "sampleIndex": 1,
            "varType": 4
        },
        {
            "capName": "$intf_table.$link_error_in",
            "dataType": "int",
            "desc": "",
            "extraInfo": {
                "hashColumns": [],
                "hashSort": false
            },
            "fullName": "$intf_table.$link_error_in",
            "intfKey": false,
            "name": "$link_error_in",
            "realType": null,
            "sampleIndex": 1,
            "varType": 1
        },
        {
            "capName": "$intf_table.$link_error_out",
            "dataType": "int",
            "desc": "",
            "extraInfo": {
                "hashColumns": [],
                "hashSort": false
            },
            "fullName": "$intf_table.$link_error_out",
            "intfKey": false,
            "name": "$link_error_out",
            "realType": null,
            "sampleIndex": 1,
            "varType": 1
        },
        {
            "capName": "$intf_table.$sys_uptime",
            "dataType": "int",
            "desc": "",
            "extraInfo": {
                "hashColumns": [],
                "hashSort": false
            },
            "fullName": "$intf_table.$sys_uptime",
            "intfKey": false,
            "name": "$sys_uptime",
            "realType": null,
            "sampleIndex": 1,
            "varType": 1
        },
        {
            "capName": "$intf_table.$traffic_in_byte",
            "dataType": "int",
            "desc": "",
            "extraInfo": {
                "hashColumns": [],
                "hashSort": false
            },
            "fullName": "$intf_table.$traffic_in_byte",
            "intfKey": false,
            "name": "$traffic_in_byte",
            "realType": null,
            "sampleIndex": 1,
            "varType": 1
        },
        {
            "capName": "$intf_table.$traffic_out_byte",
            "dataType": "int",
            "desc": "",
            "extraInfo": {
                "hashColumns": [],
                "hashSort": false
            },
            "fullName": "$intf_table.$traffic_out_byte",
            "intfKey": false,
            "name": "$traffic_out_byte",
            "realType": null,
            "sampleIndex": 1,
            "varType": 1
        },
        {
            "capName": "$intf_table.$used64couter",
            "dataType": "bool",
            "desc": "",
            "extraInfo": {
                "hashColumns": [],
                "hashSort": false
            },
            "fullName": "$intf_table.$used64couter",
            "intfKey": false,
            "name": "$used64couter",
            "realType": null,
            "sampleIndex": 1,
            "varType": 1
        }
    ],
    "version": "7.1"
}